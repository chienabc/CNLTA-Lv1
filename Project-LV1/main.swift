//
//  main.swift
//  LESSON-1
//
//  Created by CHIEN on 29/06/2024.
//

import Foundation

// MARK: - B√†i 1: In ra m√†n h√¨nh d√≤ng ch·ªØ "Hello, World!"
// R·∫§T QUAN TR·ªåNG TRONG QU√Å TR√åNH H·ªåC

// HI·ªÇU CH·ªÆ 5 CH·ª® KH√îNG S·ªê 5

//print("NGGUYEN MINH CHIEN")
//print(28)

//.    ""
// TASK 1:
// IN RA M√ÄN H√åNH T√äN - TU·ªîI - M√ÅY T√çNH S·ª¨ D·ª§NG
// TASK 1 : TIME - 3PHUT
// MACOS - CODE TR√äN XCODE
// WIN - CODE REPLIT
//print(24/8)
// print(10/5)


//let monToan = 9
//let monHoa = 8
//let monLy = 7
//
//print(monToan)
//print("monToan")
//

// Tinh chu vu h√¨nh ch·ªØ nh·∫≠t
// (chi·ªÅu d√†i + chi·ªÅu r√¥ng) *2
// C√°ch ƒë·∫∑t t√™n
//
//let chieuDai = 8
//let chieuRong = 9
//let chuVi = (chieuDai + chieuRong) * 2
//print(chuVi)

//
//// Number Of Tickets
//150
//
//// Ticket Price
//10
//
//// Room Rental Fee
//1000
//
//// Poster Cost
//40
//
//// Total Ticket Value
//150 * 10
//
//// Total Expenses
//1000 + 40
//
//// Total Income Of Show
//(150 * 10) - (1000 + 40)





//Exercise: What Fits on Your iPhone?
//
//In this exercise, you'll figure out the answer to the timeless question: How much stuff can I fit on my iPhone?
//
//Unlike the previous exercises, no code will be provided. But here are a few things you‚Äôll need to know:
//
//iPhone storage capacity is measured in gigabytes (GB).
//The iPhone in question has 8GB of storage.
//A gigabyte is about 1000 megabytes (MB).
//The phone already has 3GB of stuff on it.
//One minute of video takes 150MB of storage.

// B√ÄI 1
//let iPhoneStorageGB = 8
//let iphoneUsedGB = 3
//let remainingStorage = iPhoneStorageGB - iphoneUsedGB
//// ƒë√°p √°n 5GB
//let videoSizeMB = 150
//// T√≠nh ·ªü d∆∞·ªõi d·∫°ng MB
////let remainingMinutes = remainingStorage * 1000
//let totalMinutes = remainingMinutes / videoSizeMB
//print(totalMinutes)

// B√ÄI N√ÄY CH√ö √ù CH·ªñ GB - MB

// B√ÄI 2
//Exercise: Fixing Your Morning
//
//There‚Äôs a lot to do before you leave home in the morning. This exercise will help you optimize your routine.
//
//Create a constant for each activity you do in the morning before leaving home: things like
//                        brushTeeth,
//                        uploadPhotos,
//                      chooseClothes,
//                        shower,
//                        goJogging,
//                      finishHomework,
//                      or fixLunch. Think about how many minutes each activity usually takes, and assign that value to each constant.
                        
                        
//let brushTeeth = 3 // 3 ph√∫t
//let uploadPhotos = 5 // 5 ph√∫t
//let chooseClothes = 1 // 7 ph√∫t
//let shower = 5 // 10 ph√∫t
//// Add more here...
///
///
////
//Exercise: Good Names
//
//You‚Äôve inherited some code from another programmer who never had a chance to take the App Development with Swift course. All you found was a note with the following written on it:
//
//Truck loading guide
//
//Pallets of oranges weigh 100lbs
//
//Pallets of watermelons weigh 200lbs
//
//Have to load up the left then right of the truck and keep it as balanced as possible. How many on each side? Melons always go together.
//
//
//B·∫°n ƒë√£ k·∫ø th·ª´a m·ªôt s·ªë m√£ t·ª´ m·ªôt l·∫≠p tr√¨nh vi√™n kh√°c, ng∆∞·ªùi ch∆∞a bao gi·ªù c√≥ c∆° h·ªôi tham gia kh√≥a h·ªçc Ph√°t tri·ªÉn ·ª©ng d·ª•ng v·ªõi Swift. T·∫•t c·∫£ nh·ªØng g√¨ b·∫°n t√¨m th·∫•y l√† m·ªôt t·ªù ghi ch√∫ c√≥ n·ªôi dung sau:
//
//H∆∞·ªõng d·∫´n x·∫øp h√†ng l√™n xe t·∫£i
//
//Pallet cam n·∫∑ng 100 lbs
//
//Pallet d∆∞a h·∫•u n·∫∑ng 200 lbs
//
//Ph·∫£i ch·∫•t h√†ng l√™n b√™n tr√°i r·ªìi b√™n ph·∫£i c·ªßa xe t·∫£i v√† gi·ªØ c√¢n b·∫±ng nh·∫•t c√≥ th·ªÉ. M·ªói b√™n c√≥ bao nhi√™u? D∆∞a lu√¥n ƒëi c√πng nhau.


// note s·∫µn t·ª´

//let oc = 14
//let wc = 3
//let ow = 100
//let ww = 200
//let to = oc * ow
//to
//let tw = wc * ww
//let ttl = to + tw
//let es = ttl / 2
//let lhso = es / ow
//let rhso = oc - lhso
//
//let palletOrangeCount = 14
//let palletWatermelonCount = 3
//let orangeWeight = 100
//let watermelonWeight = 200
//let totalOrangeWeight = palletOrangeCount * orangeWeight


//let orangeWeight = "Qu·∫£ cam n·∫∑ng 100kg"
//print(orangeWeight)
//
//let text = """
//T√¢y Ban Nha v·ªën ƒë√£ lu√¥n th√†nh c√¥ng trong vi·ªác ƒë√†o t·∫°o nh·ªØng ti·ªÅn v·ªá hay nh·∫•t th·∫ø gi·ªõi nh∆∞ng ·ªü EURO n√†y h·ªç ƒë·∫°t t·ªõi t·∫ßm c·ª° ‚ÄúMan City c·ªßa c·∫•p ƒë·ªô ƒë·ªôi tuy·ªÉn‚Äù. H·ªç kh√¥ng ki·ªÉm so√°t b√≥ng nhi·ªÅu ch·ªâ ƒë·ªÉ cho vui m√† c√≤n ƒëi k√®m t√≠nh hi·ªáu qu·∫£. C·∫£ 3 tr·∫≠n v√≤ng b·∫£ng Rodri ƒë·ªÅu gi√∫p T√¢y Ban Nha gi·ªØ s·∫°ch l∆∞·ªõi, 3 tr·∫≠n knock-out m·ªói tr·∫≠n ƒë·ªÅu ch·ªâ l·ªçt 1 b√†n, trong khi Olmo v√† Ruiz ƒë√£ l·∫ßn l∆∞·ª£t g√≥p m·∫∑t ·ªü c√°c b√†n th·∫Øng T√¢y Ban Nha ghi ƒë∆∞·ª£c. ƒêi·ªÅu n√†y ch·ª©ng t·ªè T√¢y Ban Nha kh√¥ng ch·ªâ c√≥ h√†ng c√¥ng m·∫°nh m√† c√≤n c√≥ h√†ng th·ªß v·ªØng ch·∫Øc.
//"""
//print(text.count)
// t√≠nh d·∫•u c√°ch
//let name = " kane"
//// N·∫øu kh√¥ng vi·∫øt g√¨ trong chu·ªói th√¨ c√≥ b·ªã l·ªói ch∆∞∆°ng tr√¨nh kh√¥ng
//
//print(name.count)
// √¥ng is empty check chu·ªói ƒë√≥ r·ªóng hay c√≥ ch·ªØ
// n·∫øu c√≥ ch·ªØ th√¨ tr·∫£ v·ªÅ false

//
//let textString = """
//fhsdkjhsdjkghdkjghsdgkjsdh
//jhgskjdhgskjdghskjdg
//jhdskjghsdkgjhsdgjshd
//jhfkjsdhfksjdhfsdkjfh
//"""
//// count() ƒë·∫øm s·ªë k√Ω t·ª± trong chu·ªói
//print(textString.count)
//// 91
//print(textString.isEmpty)
//// false
// /t , /n
// /t c√°ch m·ªôt ƒëo·∫°n
// /n xuong dong
// s·ª≠ d·ª•ng tu·ª≥ l√∫c
//let name = " My name is \tChien"
//print(name)
//let textString = "\u{1F496}"
//print(textString)
//
//// T·∫°o chu·ªói in ra
//
//let string1 = "Hello"
//let string2 = "World"
//let string3 = string1 + " " + string2
//print(string3)
//
//let stringUni1 = "üëçüëç"
//
//// d√πng ph√©p n·ªôi suy chu·ªói k·∫øt h·ª£p in ra Chien üëç
//// Th
//
//print("CHIEN \(stringUni1)")
//
//
//let string5 = "T√¢y Ban Nha v·ªën ƒë√£ lu√¥n th√†nh c√¥ng trong vi·ªác ƒë√†o t·∫°o"
//print(string5.count)
//let string6 = "T√¢y Ban Nha v·ªën ƒë√£ lu√¥n th√†nh c√¥ng trong vi·ªác ƒë√†o t·∫°o c·ªßa c√¢u l·∫°c b·ªô mancity"
//print(string6.count)
//print(string5 == string6)
//
//// c·∫Øt chu·ªói, n·ªëi chu·ªói, t√¨m ki·∫øm ch·ªØ trong chu·ªói.....
//// B√ÄI 1
//let iPhoneStorageGB = 8
//let iphoneUsedGB = 3
//let remainingStorage = iPhoneStorageGB - iphoneUsedGB
//// ƒë√°p √°n 5GB
//let videoSizeMB = 150
//// T√≠nh ·ªü d∆∞·ªõi d·∫°ng MB
//let remainingMinutes = remainingStorage * 1000
//let totalMinutes = remainingMinutes / videoSizeMB
//print("YOU CAN \(totalMinutes) minutes of video")
//CHU·ªñI - STRING, PH√âP N·ªòI SUY\(NAME), CHECK CHU·ªñI R√îNG ISEM, N·ªêI CHU·ªñI +, COUNT
//-----------------------//
// BI·∫æN

//let pi = 3.14
//print(pi)
//var textString = "Nguyen minh chien"
//var age = 27
//age = 28
//print(textString)
//// H·∫±ng s·ªë c·ªë ƒë·ªãnh, bi·∫øn c√≥ th·ªÉ thay ƒë·ªïi theo time
//// TEN, TUOi, SO THICH
//
//var score = 10
//score = score - 5
// score -= 5
//print(score)

//let pi = 3.14
//print(pi)
//var textString = "Nguyen minh chien"
//var age = 27
//age = 28
//print(textString)
//// H·∫±ng s·ªë c·ªë ƒë·ªãnh, bi·∫øn c√≥ th·ªÉ thay ƒë·ªïi theo time
//// TEN, TUOi, SO THICH
//
//var score = 10
//score = score - 5
// score -= 5
//print(score)

//var textString = "Hello, World!"
//// ki·ªÉu ch·ªØ string
//var number = 10
//// ki·ªÉu int
//var number2 = 6.5
//// ki·ªÉu double
//var isTrue = true
////--------------//
//print(textString)
//print(number)
//print(number2)
//print(isTrue)
//--------------//


// T·∫†O 4 BI·∫æN STRING, INT, DOUBLE, BOOL
// count, is, isEmpty

//var textString :String = ""
//print(textString.count)
//// n·∫øu c√≥ "ch·ªØ => false"
//print(textString.isEmpty)
//var number = 10.5
//print(type(of: number))
// type(of: tenBien)
//var textString = ""
//var name = "chien"
//textString += name
//print(textString)

// T·∫†O 4 BI·∫æN
// --------
// CHECK KI·ªÇU D·ªÆ LI·ªÜU 4 BI·∫æN -> type(of: number)
// S·ªê K√ù T·ª∞ TRONG BI·∫æN -> count
// N√ì C√ì R√ïNG HAY KH√îNG -> isEmpty


//var textString :String = "Hello, World!"
//var number :Int = 10
//var number2 : Double = 9.5
//var isTrue : Bool = true
//// CHECK KI·ªÇU D·ªÆ LI·ªÜU 4 BI·∫æN -> type(of: number)
//// S·ªê K√ù T·ª∞ TRONG BI·∫æN -> count
//// N√ì C√ì R√ïNG HAY KH√îNG -> isEmpty
//print("S·ªë k√Ω t·ª± trong bi·∫øn tr√™n l√† : \(textString.count)")
//print("Ki·ªÉu d·ªØ li·ªáu c·ªßa bi·∫øn tr√™n l√† : \(type(of: textString))")
//print("Bi·∫øn tr√™n c√≥ r·ªóng kh√¥ng : \(textString.isEmpty)")
//
//print("Ki·ªÉu d·ªØ li·ªáu trong bi·∫øn number \(type(of: number))")
//print("Ki·ªÉu d·ªØ li·ªáu trong bi·∫øn number2 \(type(of: number2))")
//print("Ki·ªÉu d·ªØ li·ªáu trong bi·∫øn tr√™n l√† : \(type(of: isTrue))")
//

/*
Exercise: Making a Shopping List

Description: The constants below represent some of the things you might want to add to a shopping list:
*/

//let eggs = "Eggs"
//let milk = "Milk"
//let cheese = "Cheese"
//let bread = "Bread"
//let rice = "Rice"
//let newLine = "\n"

/*
Experiment:
Create a string variable with an initial value of "". Add each constant item above to the list, one at a time. Add a newLine between items. Remember you can join two strings using the + operator. Try to decorate the shopping list with emoji.
*/

// Your code goes here
// ...

//var shoppingList :String = ""
//shoppingList += "ü•ö" + eggs + newLine
//shoppingList += "ü•õ" + milk + newLine
//shoppingList += "üßÄ" + cheese + newLine
//shoppingList += "üçû" + bread + newLine
//shoppingList += "üçö" + rice + newLine
//print(shoppingList)

// B√ÄI 3


/*
Exercise - Constant or Variable?

Imagine you're creating a simple photo sharing app. You want to keep track of the following metrics for each post:
- Number of likes: the number of likes that a photo has received
- Number of comments: the number of comments other users have left on the photo
- Year created: The year the post was created
- Month created: The month the post was created represented by a number between 1 and 12
- Day created: The day of the month the post was created

 For each of the metrics above, declare either a constant or a variable and assign it a value corresponding to a hypothetical post. Be sure to use proper naming conventions.
 */

//var numberOfLike :Int = 30
//var numberOfComments : Int = 10
//let yearCreated :Int = 2024
//let monthCreated : Int = 7
//let dayCreaeted : Int = 20
//
//
///*
//Use string cnocatenation to print a message with above info as the following sample "This photo is taken on DD-MM-YYYY and has been liked by YY people and has ZZ comments."
//*/
//
//print("This photo is taken on \(dayCreaeted) ,\(monthCreated), \(yearCreated) and has been liked by \(numberOfLike) people and has \(numberOfComments)")

//let str = readLine()
//print(type(of: str))

// Optional Value
//var myString:Int?
//myString = 2
//var myString2:Int?
//myString2 = 3
//print(myString + myString2)
//var optionalString: String?
//optionalString = "Hello, World!"
//var optionalInt : Int?
//optionalInt = 10
////print(optionalString)
////print(optionalInt)
//print(optionalString?.count)
//print(optionalString?.isEmpty)
//print(type(of: optionalString))

//var diemToan :Double = Double(readLine()!)!
//var diemLy :Double = Double(readLine()!)!
//
//var diemTrungBinh = (diemToan + diemLy) / 2
//print(diemTrungBinh)

//let input = readLine()
//print(type(of: input))
//var intOptianl : Int? = 10
//print(intOptianl + 10)

//var string : String = "789"
//var inputString = Int(string)
//print(type(of: string))
//print(type(of: inputString))
//print(inputString + "d√¢dd")

//let name : String = "Nguyen Minh Chien"
//let age : Int = 28
//print(name)
//print(age)
//var score : Int = 10
// H·∫∞NG S·ªê TH√å N√ì S·∫º KH√îNG THAY GI√Å TR·ªä, BI·∫æN S·ªê TH√å C√ì THAY ƒê·ªîI
// String, Int, Double, Bool, + - /.  %,

//print("M·ªùi b·∫°n nh·∫≠p v√†o t√™n : ")
//let str = readLine()
//print(str)
// input("")


//T·∫†O 3 BI·∫æN C√ì TH·ªÇ NH·∫¨P V√ÄO T√äN, TU·ªîI, S·ªû THICH
// => ƒê·∫¶U RA T√äN TU·ªîI S·ªû TH√çCH
//print("M·ªùi b·∫°n nh·∫≠p v√†o t√™n ")
//var name = readLine()
//print("M·ªùi b·∫°n nh·∫≠p v√†o tu·ªïi")
//var age = readLine()
//var optinalString :String?
//optinalString = "Hello, World!"
////null , ===> nil t·ª©c l√† kh√¥ng c√≥ g√¨
//// => nil
////
//print(optinalString)

// H√ÉY T·∫†O RA 3 BI·∫æN OPTINAL STRING, INT, DOUBLE
// M·ªñI BI·∫æN G√ÅN GI√Å TR·ªä , RI√äNG √îNG STRING KH√îNG => NIL
// 3 BI·∫æN, 2 BI·∫æN INT, DOUBLE
          //1 NIL
//var optionalString :String?
////optionalString = ""
//print(optionalString)

//var optionalInt : Int?
//optionalInt = 5
//
//var optionalInt2 :Int?
//optionalInt2 = 10
//
//print(optionalInt2! + optionalInt!)
//print(optionalInt)

//var optionalDouble : Double?
//optionalDouble = 5.5
//print(optionalDouble)
// d·∫•u ch·∫•m than tr∆∞·ªõc n√≥


// KHAI B√ÅO 2 BI·∫æN
//# S·ª¨ D·ª§NG PH√âP + ƒê·ªÇ C·ªòNG 2 BI·∫æN OP

//var number1 :Int = Int(readLine()!)!
 //String -> Int

//var string :String = "123"
//print(type(of : string))
//var number :Int = Int(string)!
//print(type(of: number))

// √©p ki·ªÉu d·ªØ li√™u, !, ?, readline, optional, nil
// readLine() => String
//print("M·ªùi b·∫°n nh·∫≠p v√†o s·ªë th·ª© nh·∫•t : ")
//var number1 :Double = Double(readLine()!)!
//print("M·ªùi b·∫°n nh·∫≠p v√†o s·ªë th·ª© hai : ")
//var number2 :Double = Double(readLine()!)!
//var numerb3 = number1 + number2
//print("S·ªë th·ª© 1 l√† : \(number1)")
//print("S·ªë th·ª© 2 l√† : \(number2)")
//print("S·ªë th·ª© 3 l√† : \(numerb3)")

// T√çNH ƒêI·ªÇM TRUNG B√åNH H·ªåC SINH V·ªöI 3 M√îN TO√ÅN, L√ù, HO√Å
// => ƒêI·ªÇM TRUNG B√åNH C·ª¶A B·∫†N L√Ä ....


//print("M·ªùi b·∫°n nh·∫≠p v√†o ƒëi·ªÉm to√°n :")
//var diemToan :Double = Double(readLine()!)!
//print("M·ªùi b·∫°n nh·∫≠p v√†o ƒëi·ªÉm l√Ω :")
//var diemLy :Double = Double(readLine()!)!
//print("M·ªùi b·∫°n nh·∫≠p v√†o ƒëi·ªÉm ho√° :")
//var diemHoa :Double = Double(readLine()!)!
//
//var diemTB = (diemToan + diemLy + diemHoa) / 3
//
//print("ƒêi·ªÉm trung b√¨nh c·ªßa b·∫°n l√† : \(diemTB)")

// OP, ?, Nil, readLine, √âp ki·ªÉu du·ªØ li·ªáu



// Input: name, stepGoal, todayStep,
// Process
//percentCompleted
// Output:

// "Hello YY!"
// "You completed XX percentage of your goal."
// "Good job! You're well on your way to your daily goal."

//input
//print("Nh·∫≠p v√†o t√™n : ")
//var name :String = readLine()!
//print("Nh·∫≠p v√†o m·ª•c ti√™u")
//var stepGoal : Double = Double(readLine()!)!
//print("H√¥m nay b·∫°n ƒëi bao nhi√™u b∆∞·ªõc : ")
//var stepToday : Double = Double(readLine()!)!
////process
//var percentCompleted = (stepToday / stepGoal) * 100
//// Output:
//print("Hello \(name)")
//print("You completed \(percentCompleted) percentage of your goal.")
//print("Good job! You're well on your way to your daily goal.")
//class Vehicle{
//    var wheels : Int
//    var color : String
//    // Constructor
//    init(wheels : Int, color : String) {
//        self.wheels = wheels
//        self.color = color
//    }
//}
//let myCar = Vehicle(wheels: 4, color: "Red")
//print(myCar)
// supper

/*
Exercise 1: Calculate BMI (Body Mass Index)
Requirements:
Write a command line application that takes input from the user as weight (in kg) and height (in m) and calculates their BMI.

Process:
Input weight (kg) and height (m) from the user.
Use the BMI formula: BMI = weight / (height * height).
Calculate and print the BMI value.
Output:
"Print out the BMI of the user is X."
*/
//print("Enter your weight (kg): ")
//var weight = Double(readLine()!)!
//print("Enter your height (m): ")
//var height = Double(readLine()!)!
//var bmi = weight / (height * height)
//print("The BMI of the user is \(bmi).")
/*
Exercise 3: Calculate the volume and surface area of a sphere
Requirements:
Write a command line application that takes input from the user as the radius of a sphere and calculates its volume and surface area.

Process:
Input the radius of the sphere from the user.
Calculate the volume: Volume = (4/3) * œÄ * radius^3.
Calculate the surface area: Surface Area = 4 * œÄ * radius^2.
Print out the volume and surface area.
Output:
"Print out the volume of the sphere is X and the surface area of the sphere is Y."
*/


//print("enter the radius of the sphere : ")
//var radius = Double(readLine()!)!
//var volume = (4/3) * 3.14 * pow(radius, 3)
//var surfaceArea = 4 * 3.14 * pow(radius, 2)
//print("The volume of the sphere is \(volume) and the surface area of the sphere is \(surfaceArea).")

//var turbulance = false
//
//if turbulance{
//    print("Please fasten your seatbelt")
//}
//else if turbulance{
//    print("Please fasten your seatbel...t")
//}
//else{
//    print("You can relax")
//}

//var number = 5
//var result = number >= 0 ? "Hello" : "World"
//print(result)
//number ? print("Hello") : print("World")

//print("Nh·∫≠p v√†o s·ªë a : ")
//if let a = readLine(){
//    if let number = Int(a){
//        print("S·ªë a l√† : \(number)")
//    }
//    else{
//        print("S·ªë a kh√¥ng h·ª£p l·ªá")
//    }
//}
//Requirements:
//Input an integer from the user.
//Use the if statement to check if the number is divisible by 2 or not.
//Print out the result: "X is an even number" or "X is an odd number".
//*/

//print("Nh·∫≠p v√†o s·ªë c·∫ßn ki·ªÉm tra : ")
//if let number = readLine(){
//    if let numberInt = Int(number){
//        if numberInt % 2 == 0{
//            print("\(numberInt) l√† s·ªë ch·∫µn ")
//        }else{
//            print("\(numberInt) l√† s·ªë l·∫ª ")
//        }
//    }
//}


/*
Project: Leap Year Checker
Description:
Build a command line application to check whether a year entered by the user is a leap year or not.

Requirements:
Input a year from the user.
Use the if statement to check if the year is divisible by 4. If divisible by 100, it must also be divisible by 400 to be a leap year.
Print out the result: "Year X is a leap year" or "Year X is not a leap year".
*/


/*
Exercise 1: Calculate BMI (Body Mass Index)
Requirements:
Write a command line application that takes input from the user as weight (in kg) and height (in m) and calculates their BMI.

Process:
Input weight (kg) and height (m) from the user.
Use the BMI formula: BMI = weight / (height * height).
Calculate and print the BMI value.
Output:
"Print out the BMI of the user is X."
*/

//print("M∆°i b·∫°n nh·∫≠p v√†o c√¢n n·∫∑ng (kg) : ")
//var weight = Double(readLine()!)!
//print("M·ªùi b·∫°n nh·∫≠p v√†o chi·ªÅu cao (m) : ")
//var height = Double(readLine()!)!
//var bmi = weight / (height * height)
//print("Ch·ªâ s·ªë BIM c·ªßa b·∫°n l√† : \(bmi)")


// C√ÇU L·ªÜNH ƒêI·ªÄU KI·ªÜN IF ELSE => TRUE , FALSE


// ƒëi·ªÅu ki·ªán 1. ƒë√∫ng - 2. sai
//if (number > 10){
//    // th·ª±c thi c√¢u l√™nh
//    print("ƒê√°p √°n ch√≠nh x√°c")
//}else{
//    print("ƒê√°p √°n sai r·ªìi")
//}
//ti√™p t·ª•c

//var number :Int = 10
//
//// H√ÉY D√ôNG C√ÇU L·ªÜNH IF ELSE ƒê·ªÇ TH·ª∞C HI·ªÜN KI·ªÇM TRA S·ªê √ÇM V√Ä S·ªê D∆Ø∆†NG
//// 3 PH√öT B·∫ÆT ƒê·∫¶U
//
//if (number > 11) {
//    print("ƒê√°p √°n 1")
//}
//// N·∫æU ƒê√öNG -> ƒê√ÅP √ÅN 1 ƒê·ª™NG
//else if(number > 15){
//    print("ƒê√°p √°n 2")
//}
//else if (number > 20){
//    print("ƒê√°p √°n 3")
//}
//// NHI·ªÄU ELSE IF
//// CODE CH·∫†Y T·ª™ TR√äN XU·ªêNG D∆Ø·ªöI
//else{
//    print("ƒê√°p √°n 4")
//}
//

// KI·ªÇM TRA S·ªê 5 L√Ä S·ªê CH·∫¥N HAY S·ªê L·∫∫
// TRONG V√íNG 3 PH√öT B·∫ÆT ƒê·∫¶U

// N√ÇNG C·∫§P NH·∫¨P V√ÄO M·ªòT S·ªê KI·ªÇM TRA CH·∫¥N V√Ä S·ªê L·∫∫
// 5 PH√öT B·∫ÆT ƒê·∫¶U
//var number :Int = 5
//
//if (number % 2 == 0){
//    print("S·ªë ch·∫µn")
//}else{
//    print("S·ªë l·∫ª")
//}
//C√°ch 1
//print("M·ªùi b·∫°n nh·∫≠p v√†o m·ªôt s·ªë")
//var number = Int(readLine()!)!
//if (number % 2 == 0){
//    print("ƒê√¢y l√† s·ªë ch·∫µn \(number)")
//}else{
//    print("ƒê√¢y l√† s·ªë l·∫ª \(number)")
//}
// C√°ch 2

//print("M·ªùi b·∫°n nh·∫≠p v√†o m·ªôt s·ªë")
//if var number = readLine(){
//    if let numberInt = Int(number){
//        if (numberInt % 2 == 0 ){
//            print("ƒê√¢y l√† s·ªë ch·∫µn \(numberInt)")
//        }else{
//            print("ƒê√¢y l√† s·ªë l·∫ª \(numberInt)")
//        }
//    }
//}

//var number = 2000
//
//var result = number > 1000 ? "HI" : "Say Hello"
//
//print(result)
//var number :Int = 10
//
//if (number > 15){
//    print("ƒê√°p √°n 1")
//}else if (number > 9) && (number > 5){
//    print("ƒë√°p √°n 2")
//}else{
//    print("ƒë√°p √°n 3")
//}

// && ||
// NH·∫¨P ƒêI·ªÇM T√çNH ƒêI·ªÇM TRUNG B√åNH H·ªåC SINH V·ªöI 3 M√îN TO√ÅN , ANH , L√ù
// SAU KHI T√çNH ƒêI·ªÇM TRUNG BINH XONG S·∫º PH√ÇN LO·∫†I H·ªåC SINH GI·ªéI, KH√Å, TRUNG B√åNH V√Ä Y·∫æU
//print("Nh·∫≠p ƒëi·ªÉm h√≥a: ")
//if let hoaStr = readLine(), let hoa = Double(hoaStr) {
//    print("Nh·∫≠p ƒëi·ªÉm l√Ω: ")
//    if let lyStr = readLine(), let ly = Double(lyStr) {
//        print("Nh·∫≠p ƒëi·ªÉm sinh: ")
//        if let sinhStr = readLine(), let sinh = Double(sinhStr) {
//            // T√≠nh ƒëi·ªÉm trung b√¨nh
//            let diemTrungBinh = (hoa + ly + sinh) / 3
//            // Ph√¢n lo·∫°i h·ªçc sinh
//            print("ƒêi·ªÉm trung b√¨nh: \(diemTrungBinh)")
//            if diemTrungBinh >= 8 {
//                print("H·ªçc sinh gi·ªèi")
//            } else if diemTrungBinh >= 6.5 {
//                print("H·ªçc sinh kh√°")
//            } else if diemTrungBinh >= 5 {
//                print("H·ªçc sinh trung b√¨nh")
//            } else {
//                print("H·ªçc sinh y·∫øu")
//            }
//        } else {
//            print(" ƒëi·ªÉm to√°n kh√¥ng h·ª£p l·ªá.")
//        }
//    } else {
//        print(" ƒëi·ªÉm l√Ω kh√¥ng h·ª£p l·ªá.")
//    }
//} else {
//    print(" ƒëi·ªÉm h√≥a kh√¥ng h·ª£p l·ªá.")
//}
//
//// Gi·ªëng nh·ª© tr√™n tr√™n c√≥ 2 c√°ch
//print("Nh·∫≠p v√†o ƒëi·ªÉm to√°n : ")
//var diemToan  :Double = Double(readLine()!)!
//print("Nh·∫≠p v√†o ƒëi·ªÉm l√Ω : ")
//var diemLy  :Double = Double(readLine()!)!
//print("Nh·∫≠p v√†o ƒëi·ªÉm h√≥a : ")
//var diemHoa  :Double = Double(readLine()!)!
//var diemTB = (diemToan + diemLy + diemHoa) / 3
//
//if (diemTB >= 8){
//    print("H·ªçc sinh gi·ªèi v·ªõi ƒëi·ªÉm trung b√¨nh \(diemTB)")
//}else if (diemTB >= 6.5) && (diemTB < 8){
//    print("H·ªçc sinh kh√°")
//}else if (diemTB >= 5) && (diemTB < 6.5){
//    print("H·ªçc sinh trung b√¨nh")
//}else{
//    print("H·ªçc sinh y·∫øu")
//}


//B√†i t·∫≠p v·ªÅ nh√†
//r√†ng bu·ªôc 0-10
//n·∫øu > 11
//kh√¥ng h·ª£p l·ªá

// while true
//func display(){
//    print("Hello h√†m")
//}
//display()

// T·∫†O H√ÄM NAME IN RA H·ªå V√Ä T√äN
//1 PH√öT

//func addNumbers(_ a: Int, _ b: Int){
//    let sum = a + b
//    print("T·ªïng l√† \(sum)")
//
//}
//addNumbers(10,20)
//
//// H√ÄM TH·ª∞C HI·ªÜN PH√âP NH√ÇN 2 S·ªê
//
//var name = "Nguyen Minh Chien"

//func phepNhan(a :Int) -> Int{
//    var D = a * 2
//    return result
//}
//print(phepNhan(a :9))
//var result1 = phepNhan(a: 10)


// T·∫†O H√ÄM T√çNH DI·ªÜN T√çCH H√åNH VU√îNG V√Ä M√ÄN H√åNH
// 4 PH√öT
//func dienTich(chieudai :Int , chieurong :Int) -> Int {
//    var result = chieudai * chieurong
//    return result
//}
//var resultt1 = dienTich(chieudai: 10 ,chieurong:20)
//print(resultt1)
//// ƒê√öNG

//func dienTichHinhVuong(a :Int) -> Int{
//    var tinhdientich = a * a
//    return tinhdientich
//}
//// 1 t·∫°o bi·∫øn ƒë∆∞a v√†o
//print(dienTichHinhVuong(a :10))
// h√†m s·∫µn ch·ª©c a,b,c,d ..... ch·ª©c nƒÉng

// c·∫ßn
//e ------- nhi·ªÅu code c√≥ th·ªÉ h√†m a,b,c, ch·ªânh
//f
//g
//

///*
//Project: Odd-Even Number Checker
//Description:
//Build a command line application to check whether an integer entered by the user is an odd number or an even number.
//
//Requirements:
//Input an integer from the user.
//Use the if statement to check if the number is divisible by 2 or not.
//Print out the result: "X is an even number" or "X is an odd number".
//*/

//func checkNumber(){
//    print("Nh·∫≠p v√†o m·ªôt s·ªë : ")
//    if let number = readLine(){
//        if let numberInt = Int(number){
//            if numberInt % 2 == 0{
//                print("\(numberInt) l√† s·ªë ch·∫µn")
//            }else{
//                print("\(numberInt) l√† s·ªë l·∫ª")
//            }
//        }
//    }
//
//}
//
//
//checkNumber()





//func dienSo() {
//    if let input = readLine(), let number = Int(input) {
//        return number
//    } else {
//        print(" kh√¥ng h·ª£p l·ªá vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n.")
//    }
//}
//if let number = dienSo() {
//    if number % 2 == 0 {
//        print("\(number) l√† s·ªë ch·∫µn")
//    } else {
//        print("\(number) l√† s·ªë l·∫ª")
//    }
//}

/*
Exercise 1: Calculate BMI (Body Mass Index)
Requirements:
Write a command line application that takes input from the user as weight (in kg) and height (in m) and calculates their BMI.

Process:
Input weight (kg) and height (m) from the user.
Use the BMI formula: BMI = weight / (height * height).
Calculate and print the BMI value.
Output:
"Print out the BMI of the user is X."
*/
//func calculateBMI() {
//    print("Nh·∫≠p v√†o c√¢n n·∫∑ng (kg): ")
//    if let weightStr = readLine(), let weight = Double(weightStr) {
//        print("Nh·∫≠p v√†o chi·ªÅu cao (m): ")
//        if let heightStr = readLine(), let height = Double(heightStr) {
//            let bmi = weight / (height * height)
//            print("Ch·ªâ s·ªë BMI c·ªßa b·∫°n l√† \(bmi)")
//        } else {
//            print("Chi·ªÅu cao kh√¥ng h·ª£p l·ªá.")
//        }
//    } else {
//        print("C√¢n n·∫∑ng kh√¥ng h·ª£p l·ªá.")
//    }
//}
//
//calculateBMI()

// return --> gi√° tr·ªã h√†m ki·ªÉu d·ªØ li·ªáu n√†o ƒë√≥
// truy·ªÅn tham s·ªë
// kh√¥ng tham s·ªë
// Class, Struct
// THU·ªòC T√çNH(Property) V√Ä PH∆Ø∆†NG TH·ª®C(Methods)

//class Person {
//    var name :String
//    var age :Int
//    var address :String
//    // h√†m kh·ªüi t·∫°o
//    init(name :String, age :Int, address:String){
//        self.name = name
//        self.age = age
//        self.address = address
//    }
//    func display(){
//        print("Name : \(name)")
//        print("Age : \(age)")
//        print("Address : \(address)")
//    }
//}

//let person = Person(name: "Nguyen Minh Chien", age: 28, address: "Ha Noi")
//let person1 = Person(name: "Nguyen Van A", age: 27, address: "Ho Chi Minh")
//person.display()
//person1.display()

//class Area{
//    // thu·ªôc t√≠nh(property)
//    var width :Double
//    var height :Double
//    // kh·ªüi t·∫°o
//    init(width :Double, height:Double){
//        self.width = width
//        self.height = height
//    }
//    // ph∆∞∆°ng th·ª©c, methods
//
//    func calculateArea() -> Double{
//        return width * height
//    }
//}
//let area1 = Area(width: 10, height: 20)
//print(area1.calculateArea())
//
//
//class Animal {
//    var name :String
//    var age :Int
//    var color :String
//
//    init(name :String, age :Int, color:String){
//        self.name = name
//        self.age = age
//        self.color = color
//    }
//
//    func bark(){
//        print("G√¢u g√¢u")
//    }
//    func colors(){
//        print("M√†u l√¥ng \(color)")
//    }
//}
//
//class Dog :Animal{
//    func makeSound() {
//         print("Some sound")
//     }
//    // ghi ƒë√®
//    // final c·∫•m ghi ƒë√®
//    override func bark(){
//        print("G√¢u g√¢uuuuuuuu")
//    }
//}
//
//let dog = Dog(name: "Dog", age: 2, color: "Yellow")
//dog.colors()
//dog.bark()

//struct Person{
//    var name :String
//    var age :Int
//    var address :String
//    // methods
//
//    func display(){
//        print("Name : \(name)")
//        print("Age : \(age)")
//        print("Address : \(address)")
//    }
//}
//
//let person = Person(name:"", age: 28, address: "jjjjjjj")
//person.display()


//struct Person {
//    var name: String
//    var age: Int
//    //mutating
//    mutating func haveBirthday() {
//        age += 1
//    }
//}
//
//var person = Person(name: "Alice", age: 25)
//person.haveBirthday()
//print(person.age)


//Unwrap optional data
//Force unwrapping
//Optional binding
//Nil-coalescing operator
//Error handling (try, catch)

// --------------- //
// Optional l√† g√¨? l√† m·ªôt lo·∫°i data type trong swift ->
// Trong Swift, Optional l√† m·ªôt ki·ªÉu d·ªØ li·ªáu ƒë·∫∑c bi·ªát cho ph√©p bi·∫øn c√≥ th·ªÉ ch·ª©a gi√° tr·ªã ho·∫∑c kh√¥ng c√≥ gi√° tr·ªã (nil). Optional gi√∫p tr√°nh vi·ªác truy c·∫≠p v√†o m·ªôt bi·∫øn ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ gi√° tr·ªã, ƒëi·ªÅu n√†y th∆∞·ªùng d·∫´n ƒë·∫øn l·ªói trong ch∆∞∆°ng tr√¨nh.

//var name :String? = "Joh"
//name = nil
//var age  :Int? = 18
//print(name)
//print(type(of: name))
//print(type(of: age))
//var name: String? = "John"
//
//if let unwrappedName = name {
//    print("T√™n l√† \(unwrappedName)")
//} else {
//    print("Kh√¥ng c√≥ t√™n")
//}
//print(type(of: name))
////print(type(of: unwrappedName))
//
//
//
//struct Contact {
//    var name: String
//    var email: String?
//}
//
//var contact1 = Contact(name: "Alice", email: "alice@example.com")
//var contact2 = Contact(name: "Bob", email: nil)
//
//// S·ª≠ d·ª•ng Optional Binding ƒë·ªÉ ki·ªÉm tra v√† hi·ªÉn th·ªã email
//if let email = contact2.email {
//    print("\(contact1.name) c√≥ ƒë·ªãa ch·ªâ email: \(email)")
//} else {
//    print("\(contact1.name) kh√¥ng c√≥ ƒë·ªãa ch·ªâ email")
//}

// QU·∫¢N L√ù SINH VI√äN, H·ªåC SINH, QU·∫¢N CAFE, QU√ÅN TR√Ä S·ªÆA....., T√çNH

// TH√äM DANH SACH H·ªåC SINH
//XO√Å,
//S·ª¨A
// --------------
//T√åM KI·∫æM,
//S·∫ÆP X·∫æP A-Z, ID, TU·ªîI, ƒêTB
//
// QU·∫¢N L√ù H·ªåC SINH
//H√ÄM
//ARRAY
// ARRAY R·ªñNG
// ID , NAME, AGE
// READLINE() NH·∫¨P V√î
//
//create Array
//
//
//var students: [[Any]] = []
//
//func addStudent() {
//    print("Nh·∫≠p v√†o ID: ")
//    let id = Int(readLine()!) ?? 0  // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0 n·∫øu kh√¥ng nh·∫≠p ƒë∆∞·ª£c ID
//    print("Nh·∫≠p v√†o t√™n: ")
//    let name = readLine() ?? "Kh√¥ng c√≥ t√™n"
//    // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng nh·∫≠p ƒë∆∞·ª£c t√™n
//
//    let newStudent: [Any] = [id, name]
//    // apppend th√™m v√†o m·∫£ng
//    students.append(newStudent)
//    print("ƒê√£ th√™m h·ªçc sinh th√†nh c√¥ng")
//}
////
////// 1. ADD SUTDENTS
////// 2. HI·ªÇN TH·ªä DIS
////// 3. XO√Å THEO T√äN - XO√Å CH·ªÆ C√ÅI
////// 4. XO√Å ID
//func displayStudent() {
//    print("Danh s√°ch h·ªçc sinh l√†:")
//    for student in students {
//        let id = student[0]  // Kh√¥ng c·∫ßn ki·ªÉm tra ki·ªÉu v√¨ ta gi·∫£ ƒë·ªãnh ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† ID
//        let name = student[1] // Ph·∫ßn t·ª≠ th·ª© hai l√† t√™n
//        print("ID: \(id), Name: \(name)")
//    }
//}
//
//
//func removeStudent(){
//    print("Nh·∫≠p v√†o ID c·∫ßn xo√°")
//    let id = Int(readLine()!) ?? 0
//    for (index, student) in students.enumerated(){
//        if let studentID = student[0] as? Int, studentID == id{
//            students.remove(at: index)
//            print("ƒê√£ xo√° h·ªçc sinh c√≥ ID \(id)")
//            return
//        }else{
//            print("Kh√¥ng c√≥ h·ªçc sinh")
//        }
//    }
//}
////
//func editStudent(){
//    // edit student
//    // EDIT THEO ID
//    print("Nh·∫≠p v√†o ID c·∫ßn s·ª≠a")
//    let id = Int(readLine()!) ?? 0
//    for (index, student) in students.enumerated(){
//        if let studentID = student[0] as? Int, studentID == id{
//            print("Nh·∫≠p v√†o t√™n m·ªõi")
//            let newName = readLine() ?? "Kh√¥ng c√≥ t√™n"
//            students[index][1] = newName
//            print("ƒê√£ s·ª≠a h·ªçc sinh c√≥ ID \(id)")
//            return
//        }
//    }
//}
//// T√åM KI·∫æM H·ªåC SINH THEO ID
//// UPLEN GITHUB
//// SLIDE APP
//func searchStudent(){
//    print("Nh·∫≠p v√†o ID c·∫ßn t√¨m")
//    let id = Int(readLine()!) ?? 0
//    for student in students{
//        if let studentID = student[0] as? Int, studentID == id{
//            let name = student[1]
//            print("ID: \(id), Name: \(name)")
//            return
//        }else{
//            print("KH√îNG T√åM TH·∫§Y H·ªåC SINH")
//        }
//    }
//}
//// ch·ª©c nƒÉng
//// C·∫ßn vi·∫øt main() ƒë·ªÉ ch·∫°y
//func main(){
//    while true {
//        print("1. Th√™m h·ªçc sinh")
//        print("2. Xo√° h·ªçc sinh")
//        print("3. Hi·ªÉn th·ªã danh s√°ch h·ªçc sinh")
//        print("4. S·ª≠a th√¥ng tin h·ªçc sinh")
//        print("5. T√¨m ki·∫øm th√¥ng tin c·ªßa h·ªçc sinh")
//        print("6. Tho√°t c√°c ch·ª©c nƒÉng")
//        // t·∫°o ra h·∫±ng s·ªë d√πng nh·∫≠p c√°c ch·ª©c nƒÉng ·ªü tr√™n v√†o
//        let choice = readLine()
//        // if else, switch case
//        // break, continue
//        if choice == "1"{
//            addStudent()
//        }else if choice == "2"{
//            removeStudent()
//        }else if choice == "3"{
//            displayStudent()
//        }else if choice == "4"{
//            editStudent()
//        }else if choice == "5"{
//            searchStudent()
//        }else if choice == "6"{
//            break
//        }else{
//            print("B·∫°n ƒë√£ nh·∫≠p sai! M·ªùi b·∫°n nh·∫≠p l·∫°i")
//        }
//    }
//}
//
//main()
//
//
////11.
//
//// m·ª•c ti√™u - done project g·ª≠i l·∫°i
//// done - Slide chu·∫©n b·ªã cho
//
//
//
//import Foundation
//
//var instruct = """
//Type 1 to input your info
//Type 2 to insert your name
//Type 3 to break
//"""
//print(instruct)
//
//while true {
//    let choice = readLine()
//    if choice == "1" {
//        inputInfo()
//    }
//    else if choice == "2" {
//        insertName()
//    }
//    else if choice == "3" {
//        break
//    }
//}
//var students: [[Any]] = []
//
//func inputInfo() {
//    print("Please input your name: ")
//    let inputName = readLine()
//    let name = inputName ?? "Anonymous"
//
//    print("Please input your ID: ")
//    let inputID = readLine()
//    let ID = Int(inputID ?? "0") ?? 0
//
//    print("Please input your Math score: ")
//    let inputToan = readLine()
//    let math = Double(inputToan ?? "0.0") ?? 0.0
//
//    print("Please input your Literature score: ")
//    let inputVan = readLine()
//    let literature = Double(inputVan ?? "0.0") ?? 0.0
//
//    print("Please input your English score: ")
//    let inputAnh = readLine()
//    let english = Double(inputAnh ?? "0.0") ?? 0.0
//
//    let average = (math + literature + english) / 3
//    print("Your average score is: \(average)")
//
//
//    var grade = "Fail"
//    if average >= 9.0 {
//        grade = "HSXS"
//    } else if average >= 8.0 {
//        grade = "HSG"
//    } else if average >= 7.0 {
//        grade = "HSK"
//    } else if average >= 5.0 {
//        grade = "HSTB"
//    } else if average < 5.0 && average > 0.0 {
//        grade = "HSY"
//    }
//
//    print("Your grade is \(grade)")
//
//    let newStudent: [Any] = [ID, name, average, grade]
//    students.append(newStudent)
//
//    print("Successfully added 1 student.")
//}


//var students: [[Any]] = []
//
//func inputInfo() {
//    print("Please input your name: ")
//    let inputName = readLine()
//    let name = String?(inputName ?? "") ?? "Anonymous"
//
//    print("Please input your ID: ")
//    let inputID = readLine()
//    let ID = Int(inputID ?? "") ?? 0
//
//    print("Please input your Math score: ")
//    let inputToan = readLine()
//    let math = Double(inputToan ?? "") ?? 0.0
//
//    print("Please input your Literature score: ")
//    let inputVan = readLine()
//    let literature = Double(inputVan ?? "") ?? 0.0
//
//    print("Please input your English score: ")
//    let inputAnh = readLine()
//    let english = Double(inputAnh ?? "") ?? 0.0
//
//    let average = (math + literature + english) / 3
//    print("Your average score is: \(average)")
//
//    if average >= 9.0 {
//        let grade = "HSXS"
//        print("Your grade is \(grade)")
//    }
//    else if average >= 8.0 {
//        let grade = "HSG"
//        print("Your grade is \(grade)")
//    }
//    else if average >= 7.0 {
//        let grade = "HSK"
//        print("Your grade is \(grade)")
//    }
//    else if average <= 6.5 && average >= 5 {
//        let grade = "HSTB"
//        print("Your grade is \(grade)")
//    }
//    else if average < 5.0 && average > 0.0 {
//        let grade = "HSY"
//        print("Your grade is \(grade)")
//    }
//    else {
//        let grade = "student with down syndrome"
//        print("You've been diagnosed with down syndrome, go KYS, NOW!")
//    }
//
//    let newStudent: [Any] = [ID, name, average]
//        students.append(newStudent)
//        print("Successfully added 1 student")
//}
//

// h√†m c√≥ tham s·ªë
// h√†m kh√¥ng c√≥ tham s·ªë

// tham s·ªë l√† gi√° tr·ªã truy·ªÉn v√†o h√†m parameter

//
//func sayHello(){
//    print("Xin ch√†o c√°c b·∫°n")
//}
//sayHello()
//
//func firtName (name :String){
//    print("Xin ch√†o \(name)")
//}
//firtName(name: "Nguyen Minh Chien")
//
//// argument ƒë·ªëi s·ªë
//// parameter tham s·ªë
//
//func sum (a: Int, b: Int) -> Int{
//    return a + b
//}
//print("Gi√° tr·ªã c·ªßa ph√©p t√≠nh l√† \(sum(a: 3, b: 5))")

// COLLECTIONS
//LIST
//var pc :[Any] = ["RAM", "CPU", "Mainbroad","SSD", 8, 16, 32]
//print(pc[1], pc[4])
//print(pc.count)
//pc.append("HDD")
//print(pc.count)
//pc.insert("VGA", at: 2)
//print(pc)
//pc.remove(at: 3)
//print(pc)

//append() ‚Äì Th√™m ph·∫ßn t·ª≠ v√†o Array
//insert(_:at:) ‚Äì Ch√®n ph·∫ßn t·ª≠ v√†o v·ªã tr√≠ x√°c ƒë·ªãnh trong Array
//remove(at:) ‚Äì X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ x√°c ƒë·ªãnh trong Array
//contains() ‚Äì Ki·ªÉm tra m·ªôt ph·∫ßn t·ª≠ c√≥ trong Set, Array hay kh√¥ng
//removeValue(forKey:) ‚Äì X√≥a ph·∫ßn t·ª≠ kh·ªèi Dictionary theo kh√≥a
//intersection() ‚Äì T√¨m giao c·ªßa hai Sets
//union() ‚Äì H·ª£p c·ªßa hai Sets

// SET
//var numbers: Set<Int> = [1, 2, 3, 4]
//print(numbers.contains(3))
////print(numbers.insert(7))
//print(numbers.remove(2)!)
//print(numbers)

// DICTIONARIES

//var studentAges: [String: Int] = ["John": 20, "Mary": 22]
//print(studentAges["Mary"]!)
//studentAges["Peter"] = 21
//print(studentAges)
//studentAges.removeValue(forKey: "Mary")
//print(studentAges)
//let johnAge = studentAges["John"]  // 20
//print(studentAges)
//print(johnAge)

// bi·∫øn s·ªë, h·∫±ng s·ªë (M·ªôt s·ªë quy t·∫Øc, count, is....)
// if else
// readLine(), Optional
// Array, v√≤ng l·∫∑p for
// function (h√†m)
    //.....

// bi·∫øn s·ªë
//var string : String = "Hello"
//// Int, Double, Bool....
//print(string)
//// h·∫±ng s·ªë
//let number : Int = 10

//Optional
//var name : String? = "ABC"
//print(name!)


// H√ÄM R·∫§T NHI·ªÄU

